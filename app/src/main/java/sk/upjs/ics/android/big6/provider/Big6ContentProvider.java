package sk.upjs.ics.android.big6.provider;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

import java.util.Calendar;

import sk.upjs.ics.android.util.Defaults;

import static android.content.ContentResolver.SCHEME_CONTENT;
import static sk.upjs.ics.android.big6.provider.Big6Provider.TrainingHistory;

import static sk.upjs.ics.android.util.Defaults.ALL_COLUMNS;
import static sk.upjs.ics.android.util.Defaults.NO_CONTENT_OBSERVER;
import static sk.upjs.ics.android.util.Defaults.NO_GROUP_BY;
import static sk.upjs.ics.android.util.Defaults.NO_HAVING;
import static sk.upjs.ics.android.util.Defaults.NO_SELECTION;
import static sk.upjs.ics.android.util.Defaults.NO_SELECTION_ARGS;
import static sk.upjs.ics.android.util.Defaults.NO_SORT_ORDER;
import static sk.upjs.ics.android.util.Defaults.NO_NULL_COLUMN_HACK;


public class Big6ContentProvider extends ContentProvider {

    public static final String ALL_ROWS = null;

    public Big6ContentProvider() {
    }

    //public static final String CONTENT_URI = "content://sk.upjs.ics.android.big6.provider.TrainingsContentProvider/trainingHistory";
    public static final String AUTHORITY = "sk.upjs.ics.android.big6.provider.TrainingsContentProvider";

    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(TrainingHistory.TABLE_NAME)
            .build();

    private DatabaseOpenHelper databaseHelper;

    @Override
    public boolean onCreate() {

        databaseHelper = new DatabaseOpenHelper(this.getContext());

        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        Cursor cursor = db.query(TrainingHistory.TABLE_NAME, ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
        cursor.setNotificationUri(getContext().getContentResolver(), uri);
        return cursor;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        long id = ContentUris.parseId(uri);
        if (id != -1l) {
            int affectedRows = databaseHelper.getWritableDatabase()
                .delete(TrainingHistory.TABLE_NAME, TrainingHistory._ID + " = " + id, Defaults.NO_SELECTION_ARGS);
            getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
            return affectedRows;
        }
        //else delete all items in table
        // http://stackoverflow.com/questions/19183294/what-is-the-best-way-in-android-to-delete-all-rows-from-a-table
        // https://groups.google.com/forum/#!topic/android-developers/wK5gZ-VxcSg
        int affectedRows = databaseHelper.getWritableDatabase()
                .delete(TrainingHistory.TABLE_NAME, ALL_ROWS, Defaults.NO_SELECTION_ARGS);
        getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
        return affectedRows;
    }

    @Override
    public String getType(Uri uri) {
        // TODO: Implement this to handle requests for the MIME type of the data
        // at the given URI.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        Calendar calendar = Calendar.getInstance();
        ContentValues contentValues = new ContentValues();
        contentValues.put(TrainingHistory._ID, Defaults.AUTOGENERATED_ID);
        contentValues.put(TrainingHistory.YEAR, calendar.get(Calendar.YEAR));
        contentValues.put(TrainingHistory.MONTH, calendar.get(Calendar.MONTH));
        contentValues.put(TrainingHistory.DAY, calendar.get(Calendar.DAY_OF_MONTH));
        contentValues.put(TrainingHistory.TRAINING, values.getAsString(TrainingHistory.TRAINING));
        contentValues.put(TrainingHistory.TYPE, values.getAsString(TrainingHistory.TYPE));

        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newId = db.insert(TrainingHistory.TABLE_NAME, NO_NULL_COLUMN_HACK, contentValues);
        getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        // TODO: Implement this to handle requests to update one or more rows.
        throw new UnsupportedOperationException("Not yet implemented");
    }
}
