package sk.upjs.ics.android.big6;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import java.util.List;

import sk.upjs.ics.android.util.Defaults;

import static sk.upjs.ics.android.util.Defaults.ALL_COLUMNS;
import static sk.upjs.ics.android.util.Defaults.AUTOGENERATED_ID;
import static sk.upjs.ics.android.util.Defaults.NO_CONTENT_OBSERVER;
import static sk.upjs.ics.android.util.Defaults.NO_GROUP_BY;
import static sk.upjs.ics.android.util.Defaults.NO_HAVING;
import static sk.upjs.ics.android.util.Defaults.NO_SELECTION;
import static sk.upjs.ics.android.util.Defaults.NO_SELECTION_ARGS;
import static sk.upjs.ics.android.util.Defaults.NO_SORT_ORDER;

public class Big6ContentProvider extends ContentProvider {
    public static final String AUTHORITY = "sk.upjs.ics.android.big6.Big6ContentProvider";

    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(ContentResolver.SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Database.Big6.TABLE_NAME)
            .build();

    private static final String MIME_TYPE_COLORED_DAYS = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Database.Big6.TABLE_NAME;

    private static final int WEEK_COUNT = 6;
    private static final int DAY_COUNT = 7;

    public static final int URI_MATCH_TRAINING = 0;
    public static final int URI_MATCH_TRAININGS = 1;


    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    private static final String[] COLUMN_NAMES = {
            Database.Big6._ID,
            Database.Big6.YEAR,
            Database.Big6.MONTH,
            Database.Big6.DAY,
            Database.Big6.TYPE,
            Database.Big6.ISTRAININGSET
    };
    private DatabaseOpenHelper databaseOpenHelper;

    @Override
    public boolean onCreate() {
        uriMatcher.addURI(AUTHORITY, Database.Big6.TABLE_NAME + "/#/#/#", URI_MATCH_TRAINING);
        uriMatcher.addURI(AUTHORITY, Database.Big6.TABLE_NAME, URI_MATCH_TRAININGS);

        databaseOpenHelper = new DatabaseOpenHelper(this.getContext());

        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_TRAINING:
                List<String> pathSegments = uri.getPathSegments();
                int year = Integer.parseInt(pathSegments.get(0));
                int month = Integer.parseInt(pathSegments.get(1));
                int  day = Integer.parseInt(pathSegments.get(2));

                Cursor cursor = getTrainingsCursor(year, month, day);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);

                return cursor;
            case URI_MATCH_TRAININGS:
                return getTrainingsCursor();
            default:
                return null;
        }
    }

    private Cursor getTrainingsCursor(){
        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        Cursor cursor = db.query(Database.Big6.TABLE_NAME,
                ALL_COLUMNS,
                NO_SELECTION,
                NO_SELECTION_ARGS,
                NO_GROUP_BY,
                NO_HAVING,
                NO_SORT_ORDER);
        return cursor;
    }

    private Cursor getTrainingsCursor(int year, int month, int day) {

        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        String where = Database.Big6.YEAR + "=" +year
                +"AND" +Database.Big6.MONTH + "=" + month
                +"AND" +Database.Big6.DAY + "=" + day;

        Cursor cursor = db.query(Database.Big6.TABLE_NAME,
                ALL_COLUMNS,
                where,
                NO_SELECTION_ARGS,
                NO_GROUP_BY,
                NO_HAVING,
                NO_SORT_ORDER);

        return cursor;
    }

    /*public Object[] toArray(int id, ColoredDay coloredDay) {
        int year = coloredDay.getYear();
        int month = coloredDay.getMonth();
        int day = coloredDay.getDay();

        return new Object[] { id, year, month, day, coloredDay.getColor()} ;
    }*/

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public String getType(Uri uri) {
        return MIME_TYPE_COLORED_DAYS;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        switch(uriMatcher.match(uri)){
            case URI_MATCH_TRAINING:
                List<String> segments = uri.getPathSegments();
                int year = Integer.parseInt(segments.get(1));
                int month = Integer.parseInt(segments.get(2));
                int day = Integer.parseInt(segments.get(3));
                int order = Integer.parseInt(segments.get(4));
                int type = Integer.parseInt(segments.get(5));
                Boolean isTrainingSet = Boolean.valueOf(segments.get(6));

                ContentValues newContentValues = new ContentValues();
                newContentValues.put(Database.Big6._ID, AUTOGENERATED_ID);
                newContentValues.put(Database.Big6.YEAR, year);
                newContentValues.put(Database.Big6.MONTH, month);
                newContentValues.put(Database.Big6.DAY, day);
                newContentValues.put(Database.Big6.ORDER, order);
                newContentValues.put(Database.Big6.TYPE, type);
                newContentValues.put(Database.Big6.ISTRAININGSET, isTrainingSet);


                databaseOpenHelper.getWritableDatabase()
                        .insert(Database.Big6.TABLE_NAME, Defaults.NO_NULL_COLUMN_HACK, newContentValues);
                Uri monthUri = CONTENT_URI
                        .buildUpon()
                        .appendPath(String.valueOf(year))
                        .appendPath(String.valueOf(month))
                        .build();
                getContext()
                        .getContentResolver()
                        .notifyChange(monthUri, NO_CONTENT_OBSERVER);

                return uri;
        }
        return null;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        throw new UnsupportedOperationException("Not yet implemented");
    }
}

